---
ansible_ssh_pipelining: true
ansible_ssh_extra_args: '-o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPersist=60s'

slug: vuln-demo

ec2:
  instance:
    controller:
      hostname: "craig-{{ slug }}-controller"
      function_tag: automationcontroller
      os_tag: linux
    windows:
      os_tag: windows
      function_tag: node
      user_data: "{{ lookup('template', 'winrm_setup.ps1.j2') }}"
      instance_type: t3.medium
      win2019_name: "craig-{{ slug }}-win2019"
      win2022_name: "craig-{{ slug }}-win2022"
    linux:
      os_tag: linux
      function_tag: node
      rhel9_name: "craig-{{ slug }}-rhel9"
      rhel8_name: "craig-{{ slug }}-rhel8"
      instance_type: t3.small
    tags:
      Owner: cbrandt
      Demo-slug: "{{ slug }}"
      Purpose: craig-demos
    filters:
      instance-state-name: running
      "tag:Owner": cbrandt
      "tag:Purpose": craig-demos
      "tag:Demo-slug": "{{ slug }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: gp3
          volume_size: 40
          iops: 3000
          throughput: 125
          delete_on_termination: true
  region: us-east-1
  key_name: craig-aws-dev
  security_groups:
    - craig-general
  vpc_subnet_id: subnet-0332628f89a6eb487

s3:
  bucket: tmm-demo-content.demoredhat.com.private

ec2_instances:
  - name: "{{ ec2.instance.controller.hostname }}"
    state: running
    exact_count: 1
    instance_type: t3.large
    image_id: ami-08e637cea2f053dfa # RHEL 9
    region: "{{ ec2.region }}"
    key_name: "{{ ec2.key_name }}"
    security_groups: "{{ ec2.security_groups }}"
    vpc_subnet_id: "{{ ec2.vpc_subnet_id }}"
    filters: "{{ ec2.instance.filters | default({}) |
              combine({'tag:Function': ec2.instance.controller.function_tag,
                      'tag:Name': ec2.instance.controller.hostname,
                      'tag:Os': ec2.instance.controller.os_tag}) }}"
    volumes: "{{ ec2.instance.volumes }}"
    network:
      assign_public_ip: true
    wait: true
    purge_tags: true
    tags: "{{ ec2.instance.tags | default({}) |
            combine({'Function': ec2.instance.controller.function_tag,
                    'Name': ec2.instance.controller.hostname,
                    'Os': ec2.instance.controller.os_tag}) }}"
  - name: "{{ ec2.instance.windows.win2019_name }}"
    region: "{{ ec2.region }}"
    exact_count: 2
    key_name: "{{ ec2.key_name }}"
    instance_type: "{{ ec2.instance.windows.instance_type }}"
    image_id: ami-06371c9f2ad704460
    security_groups: "{{ ec2.security_groups }}"
    network:
      assign_public_ip: true
    state: running
    vpc_subnet_id: "{{ ec2.vpc_subnet_id }}"
    purge_tags: true
    tags: "{{ ec2.instance.tags | default({}) |
            combine({'Function': ec2.instance.windows.function_tag,
                    'Os': ec2.instance.windows.os_tag,
                    'Name': ec2.instance.windows.win2019_name}) }}"
    filters: "{{ ec2.instance.filters | default({}) |
              combine({'tag:Function': ec2.instance.windows.function_tag,
                      'tag:Os': ec2.instance.windows.os_tag,
                      'tag:Name': ec2.instance.windows.win2019_name}) }}"
    wait: true
    user_data: "{{ ec2.instance.windows.user_data }}"
  - name: "{{ ec2.instance.windows.win2022_name }}"
    region: "{{ ec2.region }}"
    exact_count: 1
    key_name: "{{ ec2.key_name }}"
    instance_type: "{{ ec2.instance.windows.instance_type }}"
    image_id: ami-064d05b4fe8515623
    security_groups: "{{ ec2.security_groups }}"
    network:
      assign_public_ip: true
    state: running
    vpc_subnet_id: "{{ ec2.vpc_subnet_id }}"
    tags: "{{ ec2.instance.tags | default({}) |
            combine({'Function': ec2.instance.windows.function_tag,
                    'Os': ec2.instance.windows.os_tag,
                    'Name': ec2.instance.windows.win2022_name}) }}"
    filters: "{{ ec2.instance.filters | default({}) |
              combine({'tag:Function': ec2.instance.windows.function_tag,
                      'tag:Os': ec2.instance.windows.os_tag,
                      'tag:Name': ec2.instance.windows.win2022_name}) }}"
    wait: true
    user_data: "{{ ec2.instance.windows.user_data }}"
    volumes: "{{ ec2.instance.volumes }}"
  - name: "{{ ec2.instance.linux.rhel9_name }}"
    region: "{{ ec2.region }}"
    exact_count: 1
    key_name: "{{ ec2.key_name }}"
    instance_type: "{{ ec2.instance.linux.instance_type }}"
    image_id: ami-08e637cea2f053dfa
    security_groups: "{{ ec2.security_groups }}"
    network:
      assign_public_ip: true
    state: running
    vpc_subnet_id: "{{ ec2.vpc_subnet_id }}"
    tags: "{{ ec2.instance.tags | default({}) |
            combine({'Function': ec2.instance.linux.function_tag,
                    'Os': ec2.instance.linux.os_tag,
                    'Name': ec2.instance.linux.rhel9_name}) }}"
    filters: "{{ ec2.instance.filters | default({}) |
              combine({'tag:Function': ec2.instance.linux.function_tag,
                      'tag:Os': ec2.instance.linux.os_tag,
                      'tag:Name': ec2.instance.linux.rhel9_name}) }}"
    wait: true
  - name: "{{ ec2.instance.linux.rhel8_name }}"
    region: "{{ ec2.region }}"
    exact_count: 3
    key_name: "{{ ec2.key_name }}"
    instance_type: "{{ ec2.instance.linux.instance_type }}"
    image_id: ami-06640050dc3f556bb
    security_groups: "{{ ec2.security_groups }}"
    network:
      assign_public_ip: true
    state: running
    vpc_subnet_id: "{{ ec2.vpc_subnet_id }}"
    tags: "{{ ec2.instance.tags | default({}) |
            combine({'Function': ec2.instance.linux.function_tag,
                    'Os': ec2.instance.linux.os_tag,
                    'Name': ec2.instance.linux.rhel8_name}) }}"
    filters: "{{ ec2.instance.filters | default({}) |
              combine({'tag:Function': ec2.instance.linux.function_tag,
                      'tag:Os': ec2.instance.linux.os_tag,
                      'tag:Name': ec2.instance.linux.rhel8_name}) }}"
    wait: true

redhat_username: "{{ lookup('ansible.builtin.env', 'REDHAT_USERNAME') }}"
redhat_password: "{{ lookup('ansible.builtin.env', 'REDHAT_PASSWORD') }}"
registry_username: "{{ redhat_username }}"
registry_password: "{{ redhat_password }}"
aap_dir: "/home/{{ ansible_user }}/aap_install"
# RHEL 9 AAP 2.3
provided_sha_value: ca2541e6e7f74306197c3fe8a009c7a9b228342d0469e6707c943c8435b01fa2
offline_token: "{{ lookup('ansible.builtin.env', 'REDHAT_OFFLINE_TOKEN') }}"
controller_install_command: "ANSIBLE_BECOME_METHOD='sudo' ANSIBLE_BECOME=True ./setup.sh -e registry_username='{{ registry_username }}' -e registry_password='{{ registry_password }}'" # noqa yaml[line-length]
controller_hostname: "{{ vault_controller_hostname | default(lookup('env', 'CONTROLLER_HOST')) }}"
controller_validate_certs: "{{ vault_controller_validate_certs | default(lookup('env', 'CONTROLLER_VERIFY_SSL')) }}"
controller_username: "{{ vault_controller_username | default(lookup('env', 'CONTROLLER_USERNAME')) }}"
controller_password: "{{ vault_controller_password | default(lookup('env', 'CONTROLLER_PASSWORD')) }}"
# admin_password: "{{ vault_admin_password }}"
# export_path: "{{ playbook_dir }}/../files/exported"
codeserver_url: https://github.com/coder/code-server/releases/download/v4.9.1/code-server-4.9.1-amd64.rpm
codeserver_rescue_url: https://github.com/coder/code-server/releases/download/v4.9.1/code-server-4.9.1-amd64.rpm

rhsm_org_id: "{{ lookup('ansible.builtin.env', 'RHSM_ORG_ID') }}"
rhsm_activation_key: "{{ lookup('ansible.builtin.env', 'RHSM_ACTIVATION_KEY') }}"
rhsm_username: "{{ lookup('ansible.builtin.env', 'RHSM_USERNAME') }}"
rhsm_password: "{{ lookup('ansible.builtin.env', 'RHSM_PASSWORD') }}"
rhsm_pool_ids: "{{ lookup('ansible.builtin.env', 'RHSM_POOL_IDS') }}"

# Demo specific config
lab_organization: "GFS"
lab_execution_environment: Vulnerability - execution environment
lab_execution_environment_image: quay.io/acme_corp/zta_ee
lab_insights_credential_type: Vulnerability - Insights Collection
lab_win_credential_name: Vulnerability - Windows credentials
lab_aws_credential_name: Vulnerability - AWS credentials
lab_linux_credential_name: 	Vulnerability - Linux credentials
lab_insights_credential_name: Vulnerability - Insights credentials
lab_insights_inventory_credential_name: Vulnerability - Insights inventory credentials
lab_controller_credential_name: Vulnerability - Controller credentials
lab_insights_project_name: Vulnerability - Insights project
lab_insights_scan_project_name: Vulnerability - scan project
lab_insights_scan_project_repo: https://github.com/ansible/awx-facts-playbooks
lab_project_name: GFS repo
lab_project_repo: https://github.com/craig-br/demos.git
lab_project_repo_branch: devel
lab_inventory_name: Vulnerability - GFS inventory
lab_insights_inventory_name: Vulnerability - GFS Insights inventory
lab_vuln_inventory_name: Vulnerable hosts
lab_vuln_inventory_filter: 'ansible_facts__ansible_distribution_version="10.0.17763.0" and ansible_facts__ansible_distribution="Microsoft Windows Server 2019 Datacenter"'
lab_vuln_distribution: '"Microsoft Windows Server 2019 Datacenter"'
lab_vuln_distribution_version: '"10.0.17763.0"'
lab_win_username: "{{ vault_lab_win_username }}"
lab_win_password: "{{ vault_lab_win_password }}"
lab_student_username: "{{ vault_lab_student_username }}"
lab_student_password: "{{ vault_lab_student_password }}"
lab_admin_username: "{{ vault_lab_admin_username }}"
lab_admin_password: "{{ vault_lab_admin_password }}"

controller_os_packages:
  - python3-pip
  - automation-controller-cli
  - vim
# Controller collection config
controller_configuration_dispatcher_roles:
  - {role: settings, var: controller_settings, tags: settings}
  - {role: organizations, var: controller_organizations, tags: organizations}
  - {role: labels, var: controller_labels, tags: labels}
  - {role: users, var: controller_user_accounts, tags: users}
  - {role: teams, var: controller_teams, tags: teams}
  - {role: credential_types, var: controller_credential_types, tags: credential_types}
  - {role: credentials, var: controller_credentials, tags: credentials}
  - {role: credential_input_sources, var: controller_credential_input_sources, tags: credential_input_sources}
  - {role: notification_templates, var: controller_notifications, tags: notification_templates}
  - {role: projects, var: controller_projects, tags: projects}
  - {role: execution_environments, var: controller_execution_environments, tags: execution_environments}
  - {role: applications, var: controller_applications, tags: applications}
  - {role: instance_groups, var: controller_instance_groups, tags: instance_groups}
  - {role: inventories, var: controller_inventories, tags: inventories}
  - {role: project_update, var: controller_projects, tags: projects}
  - {role: inventory_sources, var: controller_inventory_sources, tags: inventory_sources}
  - {role: inventory_source_update, var: controller_inventory_sources, tags: inventory_sources}
  - {role: hosts, var: controller_hosts, tags: hosts}
  - {role: groups, var: controller_groups, tags: inventories}
  - {role: job_templates, var: controller_templates, tags: job_templates}
  - {role: workflow_job_templates, var: controller_workflows, tags: workflow_job_templates}
  - {role: schedules, var: controller_schedules, tags: schedules}
  - {role: roles, var: controller_roles, tags: roles}

# CoP Collection vars https://github.com/redhat-cop/controller_configuration
controller_configuration_credentials_secure_logging: true
controller_configuration_inventory_source_update_async_retries: 50
controller_configuration_projects_async_retries: 50
controller_configuration_secure_logging: true
controller_configuration_async_retries: 50
controller_configuration_inventory_source_update_async_delay: 5


controller_execution_environments:
  - name: "{{ lab_execution_environment }}"
    # organization: "{{ lab_organization }}"
    image: quay.io/acme_corp/zta_ee:latest
    description: "GFS execution environment"
    state: present
    pull: missing
    # pull: never
    force: true
