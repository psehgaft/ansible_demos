---
# - name: Configure localhost and deploy cloud instances
#   hosts: localhost
#   gather_facts: false

  # vars:
  #   slug: vuln-demo

  # vars_files:
  #   # - "vuln-demo_vars.yml"
  #   - "{{ slug }}_vars.yml"
  #   # - "vault_vuln-demo_vars.yml"
  #   - "vault_{{ slug }}_vars.yml"

  # tasks:
  #   # use '--tags install-collections' if using ansible-playbook
  #   - name: Download and upgrade collections - {{ inventory_hostname }}
  #     community.general.ansible_galaxy_install:
  #       type: collection
  #       name: "{{ item }}"
  #     loop:
  #       - ansible.workshops
  #       - amazon.aws
  #       - community.aws
  #       - community.general
  #       - ansible.posix
  #       - community.crypto
  #       - containers.podman
  #       - redhat_cop.controller_configuration
  #       - awx.awx
  #     register: __collection_install
  #     # changed_when: '"is already installed, skipping" not in __collection_install.stdout'
  #     tags:
  #       - never
  #       - install-collections

  #   - name: Create cloud instances - {{ slug }}
  #     ansible.builtin.include_tasks:
  #       file: "{{ playbook_dir }}/common/ec2_instances.yml"
  #     when: ec2_instances is defined
  #     tags:
  #       - create-instances
  #     # notify:
  #     #   - Handler - Remove cloud instances

    # - name: Refresh inventory
    #   ansible.builtin.meta: refresh_inventory
    #   tags:
    #     - always

    # - name: Add controller hosts to inventory
    #   ansible.builtin.add_host:
    #     name: "{{ item.tags.Name }}"
    #     groups: "{{ item.tags.Function }}"
    #     ansible_host: "{{ item.public_ip_address }}"
    #   args: "{{ ec2.instance.host_vars | default(omit) }}"
    #   loop: "{{ __instances_info.instances }}"
    #   loop_control:
    #     label: "{{ item.tags.Name }}"
    #   when:
    #     - item.tags.Function == "automationcontroller"
    #     - (__instances_info is defined) and (__instances_info.instances  | length > 0)
    #   tags:
    #     - create-instances

  # handlers:
  #   - name: Handler - Remove cloud instances
  #     when: (ec2_instances is defined) and (ec2_instances | length > 0)
  #     tags:
  #       - delete-instances
  #     block:
  #       - name: Remove ec2 instances
  #         amazon.aws.ec2_instance:
  #           name: "{{ __remove_instances_job_async_item.name }}"
  #           region: "{{ __remove_instances_job_async_item.region }}"
  #           state: terminated
  #           filters: "{{ __remove_instances_job_async_item.filters }}"
  #         loop: "{{ ec2_instances }}"
  #         loop_control:
  #           loop_var: __remove_instances_job_async_item
  #           label: "{{ __remove_instances_job_async_item.name }}"
  #         async: 1000
  #         poll: 0
  #         register: __remove_instances_job_async
  #         changed_when: not __remove_instances_job_async.changed

  #       - name: "Remove ec2 instances | Wait for finish the instance deletion"
  #         ansible.builtin.async_status:
  #           jid: "{{ __remove_instances_job_async_result_item.ansible_job_id }}"
  #         retries: 60
  #         delay: 1
  #         loop: "{{ __remove_instances_job_async.results }}"
  #         loop_control:
  #           loop_var: __remove_instances_job_async_result_item
  #           label: "{{ __remove_instances_job_async_result_item.__remove_instances_job_async_item.name }}"
  #         until: __remove_instances_job_async_result.finished
  #         register: __remove_instances_job_async_result
  #         when: __remove_instances_job_async_result_item.ansible_job_id is defined

# Install and configure controller
- name: Configure controller - {{ slug }}
  hosts: automationcontroller
  become: false

  vars:
    slug: vuln-demo

  vars_files:
    - "{{ slug }}_vars.yml"
    - "vault_{{ slug }}_vars.yml"


  # pre_tasks:
  #   - name: Include vars file from extra_vars directory
  #     when: (slug is defined) and (slug | length > 0)
  #     no_log: true
  #     tags:
  #       - always
  #     block:
  #       - name: Include file - {{ slug }}_vars.yml
  #         ansible.builtin.include_vars:
  #           file: "{{ slug }}_vars.yml"
  #     rescue:
  #       - name: Rescue - Include vars file
  #         ansible.builtin.debug:
  #           msg: "Rescue - Vars file '{{ slug }}_vars.yml' not found. Skipping"

  tasks:
    # - setup:
    #   tags:
    #     - always

    - name: Get ec2 controller instances info - {{ ec2.instance.controller.function_tag }}
      amazon.aws.ec2_instance_info:
        region: "{{ ec2.region }}"
        filters: "{{ ec2.instance.filters | default({}) |
                  combine({'tag:Function': ec2.instance.controller.function_tag,
                          'tag:Name': ec2.instance.controller.hostname}) }}"
      delegate_to: localhost
      register: __controller_instances_info
      tags:
        - always

    - name: Set fact controller_hostname
      ansible.builtin.set_fact:
        controller_hostname: "https://{{ item.public_dns_name }}"
      when: __controller_instances_info.instances is defined
      loop: "{{ __controller_instances_info.instances }}"
      tags:
        - always

    - name: Include common user tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/configure_users.yml"
        apply:
          become: true
          tags:
            - install-controller

    - name: Include common controller install tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/install_controller.yml"
        apply:
          tags:
            - install-controller

    # - name: Include common controller post install tasks
    #   tags:
    #     - configure-controller
    #   delegate_to: localhost
    #   become: false
    #   block:
    #     - name: Create temp workspace
    #       ansible.builtin.tempfile:
    #         state: directory
    #         prefix: __controller_objects
    #       register: __temp_dir

    #     - name: Create export directory
    #       ansible.builtin.file:
    #         state: directory
    #         path: "{{ __temp_dir.path }}/{{ slug }}"
    #         mode: 0700

    #     - name: List S3 objects - {{ s3.bucket }}/{{ slug }}
    #       amazon.aws.s3_object:
    #         bucket: "{{ s3.bucket }}"
    #         mode: list
    #         marker: "{{ slug }}/"
    #         prefix: "{{ slug }}/"
    #       register: __s3_objects

    #     - name: Get S3 objects - {{ s3.bucket }}/{{ slug }}
    #       amazon.aws.s3_object:
    #         bucket: "{{ s3.bucket }}"
    #         object: "{{ item }}"
    #         dest: "{{ __temp_dir.path }}/{{ slug }}/{{ item  | basename }}"
    #         mode: get
    #       register: __s3_objects_item
    #       loop: "{{ __s3_objects.s3_keys }}"

    #     - name: Include exported output file vars - {{ slug }}
    #       ansible.builtin.include_vars:
    #         dir: "{{ __temp_dir.path }}/{{ slug }}"
    #         extensions:
    #           - yml
    #       # no_log: true
    #       delegate_to: localhost
    #       become: false

    - name: temp Include exported output file vars - {{ slug }}
      ansible.builtin.include_vars:
        file: "{{ slug }}_controller_exported_vars.yml"
        # extensions:
        #   - yml
      # no_log: true
      delegate_to: localhost
      # become: false
      tags:
        - configure-controller

    # - name: Include common post install tasks
    #   ansible.builtin.include_tasks:
    #     file: "{{ playbook_dir }}/common/controller_post_install.yml"
    #     apply:
    #       become: true
    #       tags:
    #         - configure-controller
    #   tags:
    #     - configure-controller

    # Using extra vars file for this.
    # Check https://github.com/redhat-cop/controller_configuration
    - name: Create lab controller objects
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.dispatch
        apply:
          delegate_to: localhost
          tags:
            - configure-controller
      tags:
        - configure-controller

    - name: Install code server
      ansible.builtin.include_role:
        name: code_server
        apply:
          become: true
          tags:
            - install-code-server
      tags:
        - install-code-server