---
# Provision ec2 instances
- name: Create cloud instances
  block:
    - name: Create ec2 instances
      amazon.aws.ec2_instance:
        name: "{{ __create_instances_job_async_item.name }}"
        region: "{{ __create_instances_job_async_item.region | default(omit) }}"
        state: "{{ __create_instances_job_async_item.state | default('running') }}"
        tags: "{{ __create_instances_job_async_item.tags | default(omit) }}"
        purge_tags: "{{ __create_instances_job_async_item.purge_tags  | default(omit) }}"
        exact_count: "{{ __create_instances_job_async_item.exact_count }}"
        wait: "{{ __create_instances_job_async_item.wait }}"
        instance_type: "{{ __create_instances_job_async_item.instance_type }}"
        image_id: "{{ __create_instances_job_async_item.image_id }}"
        security_group: "{{ __create_instances_job_async_item.security_group | default(omit) }}"
        vpc_subnet_id: "{{ __create_instances_job_async_item.vpc_subnet_id | default(omit) }}"
        security_groups: "{{ __create_instances_job_async_item.security_groups | default(omit) }}"
        network: "{{ __create_instances_job_async_item.network | default(omit) }}"
        volumes: "{{ __create_instances_job_async_item.volumes | default(omit) }}"
        key_name: "{{ __create_instances_job_async_item.key_name }}"
        filters: "{{ __create_instances_job_async_item.filters | default(omit) }}"
        user_data: "{{ __create_instances_job_async_item.user_data | default(omit) }}"
      loop: "{{ ec2_instances }}"
      loop_control:
        loop_var: __create_instances_job_async_item
        label: "{{ __create_instances_job_async_item.name }}"
      async: 1000
      poll: 0
      register: __create_instances_job_async
      changed_when: not __create_instances_job_async.changed

    - name: Create ec2 instances | Async
      ansible.builtin.async_status:
        jid: "{{ __create_instances_job_async_result_item.ansible_job_id }}"
      retries: 60
      delay: 1
      loop: "{{ __create_instances_job_async.results }}"
      loop_control:
        loop_var: __create_instances_job_async_result_item
        label: "{{ __create_instances_job_async_result_item.__create_instances_job_async_item.name }}"
      until: __create_instances_job_async_result.finished
      register: __create_instances_job_async_result
      when: __create_instances_job_async_result_item.ansible_job_id is defined
  rescue:
    - name: Print error message and remove instances
      ansible.builtin.fail:
        msg: |
          "Rescue - Unable to create instances.
          "{{ __create_instances_job_async_result }}"
      notify:
        - Remove cloud instances

- name: Get ec2 instances info
  amazon.aws.ec2_instance_info:
    region: "{{ ec2.region }}"
    filters: "{{ ec2.instance.filters }}"
  register: __instances_info

- name: Wait for cloud instances to start
  when:
    - (__instances_info is defined) and (__instances_info.instances | length > 0)
  block:
    - name: Remove previous known_hosts keys - {{ inventory_hostname }}
      ansible.builtin.known_hosts:
        name: "{{ item.public_ip_address }}"
        state: absent
      loop: "{{ __instances_info.instances }}"
      loop_control:
        label: "{{ item.tags.Name }}"

    - name: Wait for cloud instances - SSH
      ansible.builtin.wait_for:
        host: "{{ __instances_ssh_async_item.public_ip_address }}"
        port: 22
        delay: 1
        timeout: 120
      when: __instances_ssh_async_item.tags.Os == 'linux'
      loop: "{{ __instances_info.instances }}"
      loop_control:
        loop_var: __instances_ssh_async_item
        label: "{{ __instances_ssh_async_item.tags.Name }}"
      async: 1000
      poll: 0
      register: __instances_ssh_async
      changed_when: not __instances_ssh_async.changed

    - name: Wait for cloud instances - SSH | Async
      ansible.builtin.async_status:
        jid: "{{ __instances_ssh_async_result_item.ansible_job_id }}"
      retries: 35
      delay: 5
      loop: "{{ __instances_ssh_async.results }}"
      loop_control:
        loop_var: __instances_ssh_async_result_item
        label: "{{ __instances_ssh_async_result_item.__instances_ssh_async_item.tags.Name }}"
      until: __instances_ssh_async_result.finished
      register: __instances_ssh_async_result
      when: __instances_ssh_async_result_item.ansible_job_id is defined

    - name: Wait for cloud instances - WinRM
      ansible.builtin.wait_for:
        host: "{{ __instances_winrm_async_item.public_ip_address }}"
        port: 5986
        delay: 1
        timeout: 120
      when:  __instances_winrm_async_item.tags.Os == 'windows'
      loop: "{{ __instances_info.instances }}"
      loop_control:
        loop_var: __instances_winrm_async_item
        label: "{{ __instances_winrm_async_item.tags.Name }}"
      async: 1000
      poll: 0
      register: __instances_winrm_async
      changed_when: not __instances_winrm_async.changed

    - name: Wait for cloud instances - WinRM | Async
      ansible.builtin.async_status:
        jid: "{{ __instances_winrm_async_result_item.ansible_job_id }}"
      retries: 35
      delay: 5
      loop: "{{ __instances_winrm_async.results }}"
      loop_control:
        loop_var: __instances_winrm_async_result_item
        label: "{{ __instances_winrm_async_result_item.__instances_winrm_async_item.tags.Name }}"
      until: __instances_winrm_async_result.finished
      register: __instances_winrm_async_result
      when: __instances_winrm_async_result_item.ansible_job_id is defined
  rescue:
    - name: Print error message and remove instances
      ansible.builtin.fail:
        msg: |
          "Rescue - Unable to connect to cloud instances WinRM.
          "{{ __instances_winrm_async_result }}"
      notify:
        - Remove cloud instances
